<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.CPR.redHome.mapper.seller.SellerMapper">

    <insert id="registProducts" parameterType="RegistDto">

        insert into product (member_id, product_title,
                             product_price, product_delivery_charge,
                             product_quantity, product_category_id,
                             product_theme_id, product_main_image, product_description)
        values (#{memberId}, #{title}, #{price}, #{deliveryCharge},
                #{totalQuantity}, #{categoryNo}, #{themeNo}, #{mainImageUrl}, #{description})

    </insert>


    <insert id="registImage" parameterType="RegistDto">

        insert into product_image (product_id, product_img)
        values

        <foreach collection="list" item="item" separator=",">
            ((select product_id from product where member_id = #{item.memberId} order by product_id desc limit 1 ),
            #{item.imageUrl})
        </foreach>


    </insert>

    <sql id="query">
        select p.product_id as productId,
               p.product_title as productTitle,
               p.product_main_image as productMainImage,
               q.question_id as questionId,
               q.question_contents as questionContents,
               q.member_id as memberId,
               q.question_state as questionState,
               q.question_date as questionDate,
               m.account_id as userAccountId
        from
            product p
        inner join
            question q
            on p.product_id = q.product_id
        inner join
            member m
            on q.member_id = m.member_id
        where
            m.member_id = #{memberId}
        order by
            q.question_date desc
    </sql>

    <sql id ="search" >
        <if test="criteria.searchType == 'search_productTitle'">
            productTitle like CONCAT('%',#{criteria.searchKeyword},'%')
        </if>
        <if test="criteria.searchType == 'search_questionContents'">
            questionContents like CONCAT('%',#{criteria.searchKeyword},'%')
        </if>
        <if test="criteria.searchType == 'search_userAccountId'">
            userAccountId like CONCAT('%',#{criteria.searchKeyword},'%')
        </if>
    </sql>

    <select id="selectSellerQuestionTotalCnt" parameterType="Long" resultType="Integer">
        select count(*)
        from
            (
                <include refid="query"></include>
            ) query
        <where>
            <if test="criteria.searchType != null">
                <include refid="search"></include>
            </if>

            <if test="criteria.searchType != null and reply == 'not_yet'">and</if>

                <if test="reply == 'not_yet'">
                    questionState = '답변대기'
                </if>
        </where>
    </select>

    <select id="selectSellerQuestion" resultType="QuestionViewDto">
        select
            productId,
            productTitle,
            productMainImage,
            questionContents,
            questionId,
            memberId,
            questionState,
            questionDate,
            userAccountId
        from
            (<include refid="query"></include>) query
        <where>
            <if test="criteria.searchType != null">
                <include refid="search"></include>
            </if>

            <if test="criteria.searchType != null and reply == 'not_yet'">and</if>

            <if test="reply == 'not_yet'">
                questionState = '답변대기'
            </if>
        </where>

        <if test="orderType == 'latest'">
            order by questionDate desc
        </if>
        <if test="orderType == 'old'">
            order by questionDate asc
        </if>

        limit #{firstRecordIndex}, #{criteria.recordsPerPage}
    </select>

</mapper>